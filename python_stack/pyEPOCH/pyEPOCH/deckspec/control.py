blockName = 'control'
blockDef = {
	'mandatory'    :True,
	'allowMultiple':False,
	'parameters'   :[
		{ 'name'        :'nx',
		  'dType'       :int,
		  'mandatory'   :True,
		  'verification':lambda x: x>0 },
		{ 'name'        :'ny',
		  'dType'       :int,
		  'mandatory'   :True,
		  'minD'        :2,
		  'verification':lambda x: x>0 },
		{ 'name'        :'nz',
		  'dType'       :int,
		  'mandatory'   :True,
		  'minD'        :3,
		  'verification':lambda x: x>0 },
		{ 'name'        :'npart',
		  'dType'       :int,
		  'mandatory'   :False,
		  'verification':lambda x: x>=0 },
		{ 'name'        :'nsteps',
		  'dType'       :int,
		  'mandatory'   :True,
		  'alternatives':[('control','t_end')],
		  'verification':lambda x: x>0 },
		{ 'name'        :'t_end',
		  'dType'       :float,
		  'mandatory'   :True,
		  'alternatives':[('control','nsteps')],
		  'verification':lambda x: x>0.0 },
		{ 'name'        :'x_min',
		  'dType'       :float,
		  'mandatory'   :True },
		{ 'name'        :'y_min',
		  'dType'       :float,
		  'mandatory'   :True,
		  'minD'        :2 },
		{ 'name'        :'z_min',
		  'dType'       :float,
		  'mandatory'   :True,
		  'minD'        :3 },
		{ 'name'        :'x_max',
		  'dType'       :float,
		  'mandatory'   :True },
		{ 'name'        :'y_max',
		  'dType'       :float,
		  'mandatory'   :True,
		  'minD'        :2 },
		{ 'name'        :'z_max',
		  'dType'       :float,
		  'mandatory'   :True,
		  'minD'        :3 },
		{ 'name'        :'dt_multiplier',
		  'dType'       :float,
		  'mandatory'   :False,
		  'verification':lambda x: x>=0.0 and x<=1.0 },
		{ 'name'        :'dlb_threshold',
		  'dType'       :float,
		  'mandatory'   :False,
		  'verification':lambda x: x>=0.0 and x<=1.0 },
		{ 'name'        :'restart_snapshot',
		  'dType'       :(int,str),
		  'mandatory'   :False,
		  'verification':lambda x: True if (type(x)==int and x>=0) or (type(x)==str) else False },
		{ 'name'        :'field_order',
		  'dType'       :int,
		  'mandatory'   :False,
		  'allowedVals':[2,4,6] },
		{ 'name'        :'stdout_frequency',
		  'dType'       :int,
		  'mandatory'   :False,
		  'verification':lambda x: x>=0 },
		{ 'name'        :'use_random_seed',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'nprocx',
		  'dType'       :int,
		  'mandatory'   :False,
		  'verification':lambda x: x>0 },
		{ 'name'        :'nprocy',
		  'dType'       :int,
		  'mandatory'   :False,
		  'minD'        :2,
		  'verification':lambda x: x>0 },
		{ 'name'        :'nprocz',
		  'dType'       :int,
		  'mandatory'   :False,
		  'minD'        :3,
		  'verification':lambda x: x>0 },
		{ 'name'        :'smooth_currents',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'field_ionisation',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'use_bsi',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'use_multiphoton',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'particle_tstart',
		  'dType'       :float,
		  'mandatory'   :False,
		  'verification':lambda x: x>=0.0 },
		{ 'name'        :'use_exact_restart',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'allow_cpu_reduce',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'check_stop_file_frequency',
		  'dType'       :int,
		  'mandatory'   :False,
		  'verification':lambda x: x>0 },
		{ 'name'        :'stop_at_walltime',
		  'dType'       :float,
		  'mandatory'   :False,
		  'verification':lambda x: x>-1.0 },
		{ 'name'        :'stop_at_walltime_file',
		  'dType'       :str,
		  'mandatory'   :False },
		{ 'name'        :'simplify_deck',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'print_constants',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'use_migration',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'print_eta_string',
		  'dType'       :bool,
		  'mandatory'   :False },
		{ 'name'        :'migration_interval',
		  'dType'       :int,
		  'mandatory'   :False,
		  'verification':lambda x: x>=1 },
		{ 'name'        :'max_accumulator_steps',
		  'dType'       :int,
		  'mandatory'   :False,
		  'verification':lambda x: x>=1 }
	]
}

